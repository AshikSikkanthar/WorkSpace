import React, { useReducer } from "react";

const initialState = {
  firstCounter: 0,
  secondCounter:0
};

//state -> initialState
//action -> dipatch method parameter
const reducer = (state, action) => {
  switch (action.type) {
    case "increment":
      return {
        firstCounter: state.firstCounter + action.value,
      };
    case "decrement":
      return {
        firstCounter: state.firstCounter - action.value,
      };
    case "increment5":
      return {
        secondCounter: state.secondCounter + action.value,
      };
    case "decrement5":
      return {
        secondCounter: state.secondCounter - action.value,
      };
    case "reset":
      return initialState;
    default:
      return state;
  }
};

function ReducerCount3() {
  const [count, dispatch] = useReducer(reducer, initialState);
  const [countTwo, dispatchTwo] = useReducer(reducer, initialState);

  return (
    <div className="R1" >
     <span> <h1  class="text-warning" >Count : {count.firstCounter}</h1></span>
      <button   class="btn btn-outline-primary "
  data-mdb-ripple-color="dark"   onClick={() => dispatch({ type: "increment", value: 1 })}>
        increment
      </button>
      <button class="btn btn-outline-danger "
  data-mdb-ripple-color="dark" onClick={() => dispatch({ type: "decrement", value: 1 })}>
        decrement
      </button>
     
    <h1 class ="text-info  " >Count2 : {countTwo.secondCounter}</h1>
      <button class="btn btn-outline-warning "
  data-mdb-ripple-color="dark" onClick={() => dispatchTwo({ type: "increment5", value: 5 })}>
        increment
      </button>
      <button  class=" btn btn-outline-success" data-mdb-ripple-color="dark" onClick={() => dispatchTwo({ type: "decrement5", value: 5 })}>
        decrement
      </button>
      <button  class="btn btn-outline-secondary"
  data-mdb-ripple-color="dark"  onClick={() => dispatch({ type: "reset"})}>
        reset
      </button>
     
    </div>
  );
}

export default ReducerCount3;